// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAttachmentWithBody request with any body
	PostAttachmentWithBody(ctx context.Context, params *PostAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfirmOrgMemberId request
	PostConfirmOrgMemberId(ctx context.Context, id openapi_types.UUID, params *PostConfirmOrgMemberIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceApprovalOrganizationId request
	GetDeviceApprovalOrganizationId(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceApprovalOrganizationIdApproveAll request
	PostDeviceApprovalOrganizationIdApproveAll(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceApprovalOrganizationIdApproveRequestId request
	PostDeviceApprovalOrganizationIdApproveRequestId(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceApprovalOrganizationIdDenyAll request
	PostDeviceApprovalOrganizationIdDenyAll(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceApprovalOrganizationIdDenyRequestId request
	PostDeviceApprovalOrganizationIdDenyRequestId(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenerate request
	GetGenerate(ctx context.Context, params *GetGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectCollections request
	GetListObjectCollections(ctx context.Context, params *GetListObjectCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectFolders request
	GetListObjectFolders(ctx context.Context, params *GetListObjectFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectItems request
	GetListObjectItems(ctx context.Context, params *GetListObjectItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectOrgCollections request
	GetListObjectOrgCollections(ctx context.Context, params *GetListObjectOrgCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectOrgMembers request
	GetListObjectOrgMembers(ctx context.Context, params *GetListObjectOrgMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectOrganizations request
	GetListObjectOrganizations(ctx context.Context, params *GetListObjectOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListObjectSend request
	GetListObjectSend(ctx context.Context, params *GetListObjectSendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLock request
	PostLock(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMoveItemidOrganizationIdWithBody request with any body
	PostMoveItemidOrganizationIdWithBody(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMoveItemidOrganizationId(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, body PostMoveItemidOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectAttachmentId request
	DeleteObjectAttachmentId(ctx context.Context, id openapi_types.UUID, params *DeleteObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectAttachmentId request
	GetObjectAttachmentId(ctx context.Context, id openapi_types.UUID, params *GetObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectExposedId request
	GetObjectExposedId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectFingerprintMe request
	GetObjectFingerprintMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectFolderWithBody request with any body
	PostObjectFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectFolder(ctx context.Context, body PostObjectFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectFolderId request
	DeleteObjectFolderId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectFolderId request
	GetObjectFolderId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectFolderIdWithBody request with any body
	PutObjectFolderIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectFolderId(ctx context.Context, id openapi_types.UUID, body PutObjectFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectItemWithBody request with any body
	PostObjectItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectItem(ctx context.Context, body PostObjectItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectItemId request
	DeleteObjectItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectItemId request
	GetObjectItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectItemIdWithBody request with any body
	PutObjectItemIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectItemId(ctx context.Context, id openapi_types.UUID, body PutObjectItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectNotesId request
	GetObjectNotesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectOrgCollectionWithBody request with any body
	PostObjectOrgCollectionWithBody(ctx context.Context, params *PostObjectOrgCollectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectOrgCollection(ctx context.Context, params *PostObjectOrgCollectionParams, body PostObjectOrgCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectOrgCollectionId request
	DeleteObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *DeleteObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectOrgCollectionId request
	GetObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *GetObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectOrgCollectionIdWithBody request with any body
	PutObjectOrgCollectionIdWithBody(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, body PutObjectOrgCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectPasswordId request
	GetObjectPasswordId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectSendWithBody request with any body
	PostObjectSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectSend(ctx context.Context, body PostObjectSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectSendId request
	DeleteObjectSendId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectSendId request
	GetObjectSendId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutObjectSendIdWithBody request with any body
	PutObjectSendIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutObjectSendId(ctx context.Context, id openapi_types.UUID, body PutObjectSendIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectTemplateType request
	GetObjectTemplateType(ctx context.Context, pType GetObjectTemplateTypeParamsType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectTotpId request
	GetObjectTotpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectUriId request
	GetObjectUriId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectUsernameId request
	GetObjectUsernameId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRestoreItemId request
	PostRestoreItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendIdRemovePassword request
	PostSendIdRemovePassword(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSync request
	PostSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnlockWithBody request with any body
	PostUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnlock(ctx context.Context, body PostUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAttachmentWithBody(ctx context.Context, params *PostAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfirmOrgMemberId(ctx context.Context, id openapi_types.UUID, params *PostConfirmOrgMemberIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfirmOrgMemberIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceApprovalOrganizationId(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceApprovalOrganizationIdRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceApprovalOrganizationIdApproveAll(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceApprovalOrganizationIdApproveAllRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceApprovalOrganizationIdApproveRequestId(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceApprovalOrganizationIdApproveRequestIdRequest(c.Server, organizationId, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceApprovalOrganizationIdDenyAll(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceApprovalOrganizationIdDenyAllRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceApprovalOrganizationIdDenyRequestId(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceApprovalOrganizationIdDenyRequestIdRequest(c.Server, organizationId, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenerate(ctx context.Context, params *GetGenerateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenerateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectCollections(ctx context.Context, params *GetListObjectCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectFolders(ctx context.Context, params *GetListObjectFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectFoldersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectItems(ctx context.Context, params *GetListObjectItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectOrgCollections(ctx context.Context, params *GetListObjectOrgCollectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectOrgCollectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectOrgMembers(ctx context.Context, params *GetListObjectOrgMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectOrgMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectOrganizations(ctx context.Context, params *GetListObjectOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListObjectSend(ctx context.Context, params *GetListObjectSendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListObjectSendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLock(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLockRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMoveItemidOrganizationIdWithBody(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMoveItemidOrganizationIdRequestWithBody(c.Server, itemid, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMoveItemidOrganizationId(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, body PostMoveItemidOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMoveItemidOrganizationIdRequest(c.Server, itemid, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectAttachmentId(ctx context.Context, id openapi_types.UUID, params *DeleteObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectAttachmentIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectAttachmentId(ctx context.Context, id openapi_types.UUID, params *GetObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectAttachmentIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectExposedId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectExposedIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectFingerprintMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectFingerprintMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectFolderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectFolder(ctx context.Context, body PostObjectFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectFolderId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectFolderIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectFolderId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectFolderIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectFolderIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectFolderIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectFolderId(ctx context.Context, id openapi_types.UUID, body PutObjectFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectFolderIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectItemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectItem(ctx context.Context, body PostObjectItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectItemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectItemIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectItemIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectItemIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectItemIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectItemId(ctx context.Context, id openapi_types.UUID, body PutObjectItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectItemIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectNotesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectNotesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectOrgCollectionWithBody(ctx context.Context, params *PostObjectOrgCollectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectOrgCollectionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectOrgCollection(ctx context.Context, params *PostObjectOrgCollectionParams, body PostObjectOrgCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectOrgCollectionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *DeleteObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectOrgCollectionIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *GetObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectOrgCollectionIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectOrgCollectionIdWithBody(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectOrgCollectionIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectOrgCollectionId(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, body PutObjectOrgCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectOrgCollectionIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectPasswordId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectPasswordIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectSend(ctx context.Context, body PostObjectSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectSendId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectSendIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectSendId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectSendIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectSendIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectSendIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutObjectSendId(ctx context.Context, id openapi_types.UUID, body PutObjectSendIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutObjectSendIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectTemplateType(ctx context.Context, pType GetObjectTemplateTypeParamsType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectTemplateTypeRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectTotpId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectTotpIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectUriId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectUriIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectUsernameId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectUsernameIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestoreItemId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestoreItemIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendIdRemovePassword(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendIdRemovePasswordRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnlockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnlockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnlock(ctx context.Context, body PostUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnlockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAttachmentRequestWithBody generates requests for PostAttachment with any type of body
func NewPostAttachmentRequestWithBody(server string, params *PostAttachmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemid", runtime.ParamLocationQuery, params.Itemid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostConfirmOrgMemberIdRequest generates requests for PostConfirmOrgMemberId
func NewPostConfirmOrgMemberIdRequest(server string, id openapi_types.UUID, params *PostConfirmOrgMemberIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/confirm/org-member/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeviceApprovalOrganizationIdRequest generates requests for GetDeviceApprovalOrganizationId
func NewGetDeviceApprovalOrganizationIdRequest(server string, organizationId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device-approval/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeviceApprovalOrganizationIdApproveAllRequest generates requests for PostDeviceApprovalOrganizationIdApproveAll
func NewPostDeviceApprovalOrganizationIdApproveAllRequest(server string, organizationId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device-approval/%s/approve-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeviceApprovalOrganizationIdApproveRequestIdRequest generates requests for PostDeviceApprovalOrganizationIdApproveRequestId
func NewPostDeviceApprovalOrganizationIdApproveRequestIdRequest(server string, organizationId openapi_types.UUID, requestId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device-approval/%s/approve/%s}", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeviceApprovalOrganizationIdDenyAllRequest generates requests for PostDeviceApprovalOrganizationIdDenyAll
func NewPostDeviceApprovalOrganizationIdDenyAllRequest(server string, organizationId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device-approval/%s/deny-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeviceApprovalOrganizationIdDenyRequestIdRequest generates requests for PostDeviceApprovalOrganizationIdDenyRequestId
func NewPostDeviceApprovalOrganizationIdDenyRequestIdRequest(server string, organizationId openapi_types.UUID, requestId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "request-id", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device-approval/%s/deny/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenerateRequest generates requests for GetGenerate
func NewGetGenerateRequest(server string, params *GetGenerateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Length != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "length", runtime.ParamLocationQuery, *params.Length); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uppercase != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uppercase", runtime.ParamLocationQuery, *params.Uppercase); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lowercase != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lowercase", runtime.ParamLocationQuery, *params.Lowercase); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Number != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "number", runtime.ParamLocationQuery, *params.Number); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Special != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "special", runtime.ParamLocationQuery, *params.Special); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Passphrase != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "passphrase", runtime.ParamLocationQuery, *params.Passphrase); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Words != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "words", runtime.ParamLocationQuery, *params.Words); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Separator != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "separator", runtime.ParamLocationQuery, *params.Separator); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Capitalize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "capitalize", runtime.ParamLocationQuery, *params.Capitalize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeNumber", runtime.ParamLocationQuery, *params.IncludeNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectCollectionsRequest generates requests for GetListObjectCollections
func NewGetListObjectCollectionsRequest(server string, params *GetListObjectCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectFoldersRequest generates requests for GetListObjectFolders
func NewGetListObjectFoldersRequest(server string, params *GetListObjectFoldersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectItemsRequest generates requests for GetListObjectItems
func NewGetListObjectItemsRequest(server string, params *GetListObjectItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CollectionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "collectionId", runtime.ParamLocationQuery, *params.CollectionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Folderid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "folderid", runtime.ParamLocationQuery, *params.Folderid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Url != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "url", runtime.ParamLocationQuery, *params.Url); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Trash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trash", runtime.ParamLocationQuery, *params.Trash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectOrgCollectionsRequest generates requests for GetListObjectOrgCollections
func NewGetListObjectOrgCollectionsRequest(server string, params *GetListObjectOrgCollectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/org-collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectOrgMembersRequest generates requests for GetListObjectOrgMembers
func NewGetListObjectOrgMembersRequest(server string, params *GetListObjectOrgMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/org-members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectOrganizationsRequest generates requests for GetListObjectOrganizations
func NewGetListObjectOrganizationsRequest(server string, params *GetListObjectOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListObjectSendRequest generates requests for GetListObjectSend
func NewGetListObjectSendRequest(server string, params *GetListObjectSendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list/object/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLockRequest generates requests for PostLock
func NewPostLockRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMoveItemidOrganizationIdRequest calls the generic PostMoveItemidOrganizationId builder with application/json body
func NewPostMoveItemidOrganizationIdRequest(server string, itemid openapi_types.UUID, organizationId openapi_types.UUID, body PostMoveItemidOrganizationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMoveItemidOrganizationIdRequestWithBody(server, itemid, organizationId, "application/json", bodyReader)
}

// NewPostMoveItemidOrganizationIdRequestWithBody generates requests for PostMoveItemidOrganizationId with any type of body
func NewPostMoveItemidOrganizationIdRequestWithBody(server string, itemid openapi_types.UUID, organizationId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "itemid", runtime.ParamLocationPath, itemid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/move/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectAttachmentIdRequest generates requests for DeleteObjectAttachmentId
func NewDeleteObjectAttachmentIdRequest(server string, id openapi_types.UUID, params *DeleteObjectAttachmentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/attachment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemid", runtime.ParamLocationQuery, params.Itemid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectAttachmentIdRequest generates requests for GetObjectAttachmentId
func NewGetObjectAttachmentIdRequest(server string, id openapi_types.UUID, params *GetObjectAttachmentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/attachment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemid", runtime.ParamLocationQuery, params.Itemid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectExposedIdRequest generates requests for GetObjectExposedId
func NewGetObjectExposedIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/exposed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectFingerprintMeRequest generates requests for GetObjectFingerprintMe
func NewGetObjectFingerprintMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/fingerprint/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectFolderRequest calls the generic PostObjectFolder builder with application/json body
func NewPostObjectFolderRequest(server string, body PostObjectFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectFolderRequestWithBody generates requests for PostObjectFolder with any type of body
func NewPostObjectFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/folder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectFolderIdRequest generates requests for DeleteObjectFolderId
func NewDeleteObjectFolderIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/folder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectFolderIdRequest generates requests for GetObjectFolderId
func NewGetObjectFolderIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/folder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObjectFolderIdRequest calls the generic PutObjectFolderId builder with application/json body
func NewPutObjectFolderIdRequest(server string, id openapi_types.UUID, body PutObjectFolderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectFolderIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutObjectFolderIdRequestWithBody generates requests for PutObjectFolderId with any type of body
func NewPutObjectFolderIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/folder/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObjectItemRequest calls the generic PostObjectItem builder with application/json body
func NewPostObjectItemRequest(server string, body PostObjectItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectItemRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectItemRequestWithBody generates requests for PostObjectItem with any type of body
func NewPostObjectItemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/item")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectItemIdRequest generates requests for DeleteObjectItemId
func NewDeleteObjectItemIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/item/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectItemIdRequest generates requests for GetObjectItemId
func NewGetObjectItemIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/item/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObjectItemIdRequest calls the generic PutObjectItemId builder with application/json body
func NewPutObjectItemIdRequest(server string, id openapi_types.UUID, body PutObjectItemIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectItemIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutObjectItemIdRequestWithBody generates requests for PutObjectItemId with any type of body
func NewPutObjectItemIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/item/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectNotesIdRequest generates requests for GetObjectNotesId
func NewGetObjectNotesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectOrgCollectionRequest calls the generic PostObjectOrgCollection builder with application/json body
func NewPostObjectOrgCollectionRequest(server string, params *PostObjectOrgCollectionParams, body PostObjectOrgCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectOrgCollectionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostObjectOrgCollectionRequestWithBody generates requests for PostObjectOrgCollection with any type of body
func NewPostObjectOrgCollectionRequestWithBody(server string, params *PostObjectOrgCollectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/org-collection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectOrgCollectionIdRequest generates requests for DeleteObjectOrgCollectionId
func NewDeleteObjectOrgCollectionIdRequest(server string, id openapi_types.UUID, params *DeleteObjectOrgCollectionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/org-collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectOrgCollectionIdRequest generates requests for GetObjectOrgCollectionId
func NewGetObjectOrgCollectionIdRequest(server string, id openapi_types.UUID, params *GetObjectOrgCollectionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/org-collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObjectOrgCollectionIdRequest calls the generic PutObjectOrgCollectionId builder with application/json body
func NewPutObjectOrgCollectionIdRequest(server string, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, body PutObjectOrgCollectionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectOrgCollectionIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutObjectOrgCollectionIdRequestWithBody generates requests for PutObjectOrgCollectionId with any type of body
func NewPutObjectOrgCollectionIdRequestWithBody(server string, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/org-collection/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectPasswordIdRequest generates requests for GetObjectPasswordId
func NewGetObjectPasswordIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/password/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectSendRequest calls the generic PostObjectSend builder with application/json body
func NewPostObjectSendRequest(server string, body PostObjectSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectSendRequestWithBody generates requests for PostObjectSend with any type of body
func NewPostObjectSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectSendIdRequest generates requests for DeleteObjectSendId
func NewDeleteObjectSendIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/send/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectSendIdRequest generates requests for GetObjectSendId
func NewGetObjectSendIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/send/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutObjectSendIdRequest calls the generic PutObjectSendId builder with application/json body
func NewPutObjectSendIdRequest(server string, id openapi_types.UUID, body PutObjectSendIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutObjectSendIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutObjectSendIdRequestWithBody generates requests for PutObjectSendId with any type of body
func NewPutObjectSendIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/send/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectTemplateTypeRequest generates requests for GetObjectTemplateType
func NewGetObjectTemplateTypeRequest(server string, pType GetObjectTemplateTypeParamsType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/template/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectTotpIdRequest generates requests for GetObjectTotpId
func NewGetObjectTotpIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/totp/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectUriIdRequest generates requests for GetObjectUriId
func NewGetObjectUriIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/uri/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectUsernameIdRequest generates requests for GetObjectUsernameId
func NewGetObjectUsernameIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/username/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRestoreItemIdRequest generates requests for PostRestoreItemId
func NewPostRestoreItemIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restore/item/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSendIdRemovePasswordRequest generates requests for PostSendIdRemovePassword
func NewPostSendIdRemovePasswordRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/send/%s/remove-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSyncRequest generates requests for PostSync
func NewPostSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUnlockRequest calls the generic PostUnlock builder with application/json body
func NewPostUnlockRequest(server string, body PostUnlockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnlockRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnlockRequestWithBody generates requests for PostUnlock with any type of body
func NewPostUnlockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unlock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAttachmentWithBodyWithResponse request with any body
	PostAttachmentWithBodyWithResponse(ctx context.Context, params *PostAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error)

	// PostConfirmOrgMemberIdWithResponse request
	PostConfirmOrgMemberIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PostConfirmOrgMemberIdParams, reqEditors ...RequestEditorFn) (*PostConfirmOrgMemberIdResponse, error)

	// GetDeviceApprovalOrganizationIdWithResponse request
	GetDeviceApprovalOrganizationIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDeviceApprovalOrganizationIdResponse, error)

	// PostDeviceApprovalOrganizationIdApproveAllWithResponse request
	PostDeviceApprovalOrganizationIdApproveAllWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdApproveAllResponse, error)

	// PostDeviceApprovalOrganizationIdApproveRequestIdWithResponse request
	PostDeviceApprovalOrganizationIdApproveRequestIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdApproveRequestIdResponse, error)

	// PostDeviceApprovalOrganizationIdDenyAllWithResponse request
	PostDeviceApprovalOrganizationIdDenyAllWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdDenyAllResponse, error)

	// PostDeviceApprovalOrganizationIdDenyRequestIdWithResponse request
	PostDeviceApprovalOrganizationIdDenyRequestIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdDenyRequestIdResponse, error)

	// GetGenerateWithResponse request
	GetGenerateWithResponse(ctx context.Context, params *GetGenerateParams, reqEditors ...RequestEditorFn) (*GetGenerateResponse, error)

	// GetListObjectCollectionsWithResponse request
	GetListObjectCollectionsWithResponse(ctx context.Context, params *GetListObjectCollectionsParams, reqEditors ...RequestEditorFn) (*GetListObjectCollectionsResponse, error)

	// GetListObjectFoldersWithResponse request
	GetListObjectFoldersWithResponse(ctx context.Context, params *GetListObjectFoldersParams, reqEditors ...RequestEditorFn) (*GetListObjectFoldersResponse, error)

	// GetListObjectItemsWithResponse request
	GetListObjectItemsWithResponse(ctx context.Context, params *GetListObjectItemsParams, reqEditors ...RequestEditorFn) (*GetListObjectItemsResponse, error)

	// GetListObjectOrgCollectionsWithResponse request
	GetListObjectOrgCollectionsWithResponse(ctx context.Context, params *GetListObjectOrgCollectionsParams, reqEditors ...RequestEditorFn) (*GetListObjectOrgCollectionsResponse, error)

	// GetListObjectOrgMembersWithResponse request
	GetListObjectOrgMembersWithResponse(ctx context.Context, params *GetListObjectOrgMembersParams, reqEditors ...RequestEditorFn) (*GetListObjectOrgMembersResponse, error)

	// GetListObjectOrganizationsWithResponse request
	GetListObjectOrganizationsWithResponse(ctx context.Context, params *GetListObjectOrganizationsParams, reqEditors ...RequestEditorFn) (*GetListObjectOrganizationsResponse, error)

	// GetListObjectSendWithResponse request
	GetListObjectSendWithResponse(ctx context.Context, params *GetListObjectSendParams, reqEditors ...RequestEditorFn) (*GetListObjectSendResponse, error)

	// PostLockWithResponse request
	PostLockWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLockResponse, error)

	// PostMoveItemidOrganizationIdWithBodyWithResponse request with any body
	PostMoveItemidOrganizationIdWithBodyWithResponse(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMoveItemidOrganizationIdResponse, error)

	PostMoveItemidOrganizationIdWithResponse(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, body PostMoveItemidOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMoveItemidOrganizationIdResponse, error)

	// DeleteObjectAttachmentIdWithResponse request
	DeleteObjectAttachmentIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*DeleteObjectAttachmentIdResponse, error)

	// GetObjectAttachmentIdWithResponse request
	GetObjectAttachmentIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*GetObjectAttachmentIdResponse, error)

	// GetObjectExposedIdWithResponse request
	GetObjectExposedIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectExposedIdResponse, error)

	// GetObjectFingerprintMeWithResponse request
	GetObjectFingerprintMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetObjectFingerprintMeResponse, error)

	// PostObjectFolderWithBodyWithResponse request with any body
	PostObjectFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectFolderResponse, error)

	PostObjectFolderWithResponse(ctx context.Context, body PostObjectFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectFolderResponse, error)

	// DeleteObjectFolderIdWithResponse request
	DeleteObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectFolderIdResponse, error)

	// GetObjectFolderIdWithResponse request
	GetObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectFolderIdResponse, error)

	// PutObjectFolderIdWithBodyWithResponse request with any body
	PutObjectFolderIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectFolderIdResponse, error)

	PutObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectFolderIdResponse, error)

	// PostObjectItemWithBodyWithResponse request with any body
	PostObjectItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectItemResponse, error)

	PostObjectItemWithResponse(ctx context.Context, body PostObjectItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectItemResponse, error)

	// DeleteObjectItemIdWithResponse request
	DeleteObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectItemIdResponse, error)

	// GetObjectItemIdWithResponse request
	GetObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectItemIdResponse, error)

	// PutObjectItemIdWithBodyWithResponse request with any body
	PutObjectItemIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectItemIdResponse, error)

	PutObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectItemIdResponse, error)

	// GetObjectNotesIdWithResponse request
	GetObjectNotesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectNotesIdResponse, error)

	// PostObjectOrgCollectionWithBodyWithResponse request with any body
	PostObjectOrgCollectionWithBodyWithResponse(ctx context.Context, params *PostObjectOrgCollectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectOrgCollectionResponse, error)

	PostObjectOrgCollectionWithResponse(ctx context.Context, params *PostObjectOrgCollectionParams, body PostObjectOrgCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectOrgCollectionResponse, error)

	// DeleteObjectOrgCollectionIdWithResponse request
	DeleteObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*DeleteObjectOrgCollectionIdResponse, error)

	// GetObjectOrgCollectionIdWithResponse request
	GetObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*GetObjectOrgCollectionIdResponse, error)

	// PutObjectOrgCollectionIdWithBodyWithResponse request with any body
	PutObjectOrgCollectionIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectOrgCollectionIdResponse, error)

	PutObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, body PutObjectOrgCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectOrgCollectionIdResponse, error)

	// GetObjectPasswordIdWithResponse request
	GetObjectPasswordIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectPasswordIdResponse, error)

	// PostObjectSendWithBodyWithResponse request with any body
	PostObjectSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectSendResponse, error)

	PostObjectSendWithResponse(ctx context.Context, body PostObjectSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectSendResponse, error)

	// DeleteObjectSendIdWithResponse request
	DeleteObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectSendIdResponse, error)

	// GetObjectSendIdWithResponse request
	GetObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectSendIdResponse, error)

	// PutObjectSendIdWithBodyWithResponse request with any body
	PutObjectSendIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectSendIdResponse, error)

	PutObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectSendIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectSendIdResponse, error)

	// GetObjectTemplateTypeWithResponse request
	GetObjectTemplateTypeWithResponse(ctx context.Context, pType GetObjectTemplateTypeParamsType, reqEditors ...RequestEditorFn) (*GetObjectTemplateTypeResponse, error)

	// GetObjectTotpIdWithResponse request
	GetObjectTotpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectTotpIdResponse, error)

	// GetObjectUriIdWithResponse request
	GetObjectUriIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectUriIdResponse, error)

	// GetObjectUsernameIdWithResponse request
	GetObjectUsernameIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectUsernameIdResponse, error)

	// PostRestoreItemIdWithResponse request
	PostRestoreItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostRestoreItemIdResponse, error)

	// PostSendIdRemovePasswordWithResponse request
	PostSendIdRemovePasswordWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostSendIdRemovePasswordResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// PostSyncWithResponse request
	PostSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSyncResponse, error)

	// PostUnlockWithBodyWithResponse request with any body
	PostUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnlockResponse, error)

	PostUnlockWithResponse(ctx context.Context, body PostUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnlockResponse, error)
}

type PostAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfirmOrgMemberIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfirmOrgMemberIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfirmOrgMemberIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceApprovalOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deviceapprovallist
}

// Status returns HTTPResponse.Status
func (r GetDeviceApprovalOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceApprovalOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceApprovalOrganizationIdApproveAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceApprovalOrganizationIdApproveAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceApprovalOrganizationIdApproveAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceApprovalOrganizationIdApproveRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceApprovalOrganizationIdApproveRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceApprovalOrganizationIdApproveRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceApprovalOrganizationIdDenyAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceApprovalOrganizationIdDenyAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceApprovalOrganizationIdDenyAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceApprovalOrganizationIdDenyRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceApprovalOrganizationIdDenyRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceApprovalOrganizationIdDenyRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectOrgCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectOrgCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectOrgCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectOrgMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectOrgMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectOrgMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListObjectSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetListObjectSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListObjectSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LockunlockSuccess
}

// Status returns HTTPResponse.Status
func (r PostLockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMoveItemidOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMoveItemidOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMoveItemidOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectExposedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectExposedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectExposedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectFingerprintMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectFingerprintMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectFingerprintMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectFolderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObjectFolderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectFolderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObjectItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectNotesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectNotesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectNotesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectOrgCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectOrgCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectOrgCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectOrgCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectOrgCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectOrgCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectOrgCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectOrgCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectOrgCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectOrgCollectionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObjectOrgCollectionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectOrgCollectionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectPasswordIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectPasswordIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectPasswordIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectSendIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectSendIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectSendIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectSendIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectSendIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectSendIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutObjectSendIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutObjectSendIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutObjectSendIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectTemplateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectTemplateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectTemplateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectTotpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectTotpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectTotpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectUriIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectUriIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectUriIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectUsernameIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetObjectUsernameIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectUsernameIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRestoreItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRestoreItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRestoreItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendIdRemovePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSendIdRemovePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendIdRemovePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LockunlockSuccess
}

// Status returns HTTPResponse.Status
func (r PostUnlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAttachmentWithBodyWithResponse request with arbitrary body returning *PostAttachmentResponse
func (c *ClientWithResponses) PostAttachmentWithBodyWithResponse(ctx context.Context, params *PostAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error) {
	rsp, err := c.PostAttachmentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentResponse(rsp)
}

// PostConfirmOrgMemberIdWithResponse request returning *PostConfirmOrgMemberIdResponse
func (c *ClientWithResponses) PostConfirmOrgMemberIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PostConfirmOrgMemberIdParams, reqEditors ...RequestEditorFn) (*PostConfirmOrgMemberIdResponse, error) {
	rsp, err := c.PostConfirmOrgMemberId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfirmOrgMemberIdResponse(rsp)
}

// GetDeviceApprovalOrganizationIdWithResponse request returning *GetDeviceApprovalOrganizationIdResponse
func (c *ClientWithResponses) GetDeviceApprovalOrganizationIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDeviceApprovalOrganizationIdResponse, error) {
	rsp, err := c.GetDeviceApprovalOrganizationId(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceApprovalOrganizationIdResponse(rsp)
}

// PostDeviceApprovalOrganizationIdApproveAllWithResponse request returning *PostDeviceApprovalOrganizationIdApproveAllResponse
func (c *ClientWithResponses) PostDeviceApprovalOrganizationIdApproveAllWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdApproveAllResponse, error) {
	rsp, err := c.PostDeviceApprovalOrganizationIdApproveAll(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceApprovalOrganizationIdApproveAllResponse(rsp)
}

// PostDeviceApprovalOrganizationIdApproveRequestIdWithResponse request returning *PostDeviceApprovalOrganizationIdApproveRequestIdResponse
func (c *ClientWithResponses) PostDeviceApprovalOrganizationIdApproveRequestIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdApproveRequestIdResponse, error) {
	rsp, err := c.PostDeviceApprovalOrganizationIdApproveRequestId(ctx, organizationId, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceApprovalOrganizationIdApproveRequestIdResponse(rsp)
}

// PostDeviceApprovalOrganizationIdDenyAllWithResponse request returning *PostDeviceApprovalOrganizationIdDenyAllResponse
func (c *ClientWithResponses) PostDeviceApprovalOrganizationIdDenyAllWithResponse(ctx context.Context, organizationId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdDenyAllResponse, error) {
	rsp, err := c.PostDeviceApprovalOrganizationIdDenyAll(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceApprovalOrganizationIdDenyAllResponse(rsp)
}

// PostDeviceApprovalOrganizationIdDenyRequestIdWithResponse request returning *PostDeviceApprovalOrganizationIdDenyRequestIdResponse
func (c *ClientWithResponses) PostDeviceApprovalOrganizationIdDenyRequestIdWithResponse(ctx context.Context, organizationId openapi_types.UUID, requestId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostDeviceApprovalOrganizationIdDenyRequestIdResponse, error) {
	rsp, err := c.PostDeviceApprovalOrganizationIdDenyRequestId(ctx, organizationId, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceApprovalOrganizationIdDenyRequestIdResponse(rsp)
}

// GetGenerateWithResponse request returning *GetGenerateResponse
func (c *ClientWithResponses) GetGenerateWithResponse(ctx context.Context, params *GetGenerateParams, reqEditors ...RequestEditorFn) (*GetGenerateResponse, error) {
	rsp, err := c.GetGenerate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenerateResponse(rsp)
}

// GetListObjectCollectionsWithResponse request returning *GetListObjectCollectionsResponse
func (c *ClientWithResponses) GetListObjectCollectionsWithResponse(ctx context.Context, params *GetListObjectCollectionsParams, reqEditors ...RequestEditorFn) (*GetListObjectCollectionsResponse, error) {
	rsp, err := c.GetListObjectCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectCollectionsResponse(rsp)
}

// GetListObjectFoldersWithResponse request returning *GetListObjectFoldersResponse
func (c *ClientWithResponses) GetListObjectFoldersWithResponse(ctx context.Context, params *GetListObjectFoldersParams, reqEditors ...RequestEditorFn) (*GetListObjectFoldersResponse, error) {
	rsp, err := c.GetListObjectFolders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectFoldersResponse(rsp)
}

// GetListObjectItemsWithResponse request returning *GetListObjectItemsResponse
func (c *ClientWithResponses) GetListObjectItemsWithResponse(ctx context.Context, params *GetListObjectItemsParams, reqEditors ...RequestEditorFn) (*GetListObjectItemsResponse, error) {
	rsp, err := c.GetListObjectItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectItemsResponse(rsp)
}

// GetListObjectOrgCollectionsWithResponse request returning *GetListObjectOrgCollectionsResponse
func (c *ClientWithResponses) GetListObjectOrgCollectionsWithResponse(ctx context.Context, params *GetListObjectOrgCollectionsParams, reqEditors ...RequestEditorFn) (*GetListObjectOrgCollectionsResponse, error) {
	rsp, err := c.GetListObjectOrgCollections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectOrgCollectionsResponse(rsp)
}

// GetListObjectOrgMembersWithResponse request returning *GetListObjectOrgMembersResponse
func (c *ClientWithResponses) GetListObjectOrgMembersWithResponse(ctx context.Context, params *GetListObjectOrgMembersParams, reqEditors ...RequestEditorFn) (*GetListObjectOrgMembersResponse, error) {
	rsp, err := c.GetListObjectOrgMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectOrgMembersResponse(rsp)
}

// GetListObjectOrganizationsWithResponse request returning *GetListObjectOrganizationsResponse
func (c *ClientWithResponses) GetListObjectOrganizationsWithResponse(ctx context.Context, params *GetListObjectOrganizationsParams, reqEditors ...RequestEditorFn) (*GetListObjectOrganizationsResponse, error) {
	rsp, err := c.GetListObjectOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectOrganizationsResponse(rsp)
}

// GetListObjectSendWithResponse request returning *GetListObjectSendResponse
func (c *ClientWithResponses) GetListObjectSendWithResponse(ctx context.Context, params *GetListObjectSendParams, reqEditors ...RequestEditorFn) (*GetListObjectSendResponse, error) {
	rsp, err := c.GetListObjectSend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListObjectSendResponse(rsp)
}

// PostLockWithResponse request returning *PostLockResponse
func (c *ClientWithResponses) PostLockWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLockResponse, error) {
	rsp, err := c.PostLock(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLockResponse(rsp)
}

// PostMoveItemidOrganizationIdWithBodyWithResponse request with arbitrary body returning *PostMoveItemidOrganizationIdResponse
func (c *ClientWithResponses) PostMoveItemidOrganizationIdWithBodyWithResponse(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMoveItemidOrganizationIdResponse, error) {
	rsp, err := c.PostMoveItemidOrganizationIdWithBody(ctx, itemid, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMoveItemidOrganizationIdResponse(rsp)
}

func (c *ClientWithResponses) PostMoveItemidOrganizationIdWithResponse(ctx context.Context, itemid openapi_types.UUID, organizationId openapi_types.UUID, body PostMoveItemidOrganizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMoveItemidOrganizationIdResponse, error) {
	rsp, err := c.PostMoveItemidOrganizationId(ctx, itemid, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMoveItemidOrganizationIdResponse(rsp)
}

// DeleteObjectAttachmentIdWithResponse request returning *DeleteObjectAttachmentIdResponse
func (c *ClientWithResponses) DeleteObjectAttachmentIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*DeleteObjectAttachmentIdResponse, error) {
	rsp, err := c.DeleteObjectAttachmentId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectAttachmentIdResponse(rsp)
}

// GetObjectAttachmentIdWithResponse request returning *GetObjectAttachmentIdResponse
func (c *ClientWithResponses) GetObjectAttachmentIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetObjectAttachmentIdParams, reqEditors ...RequestEditorFn) (*GetObjectAttachmentIdResponse, error) {
	rsp, err := c.GetObjectAttachmentId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectAttachmentIdResponse(rsp)
}

// GetObjectExposedIdWithResponse request returning *GetObjectExposedIdResponse
func (c *ClientWithResponses) GetObjectExposedIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectExposedIdResponse, error) {
	rsp, err := c.GetObjectExposedId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectExposedIdResponse(rsp)
}

// GetObjectFingerprintMeWithResponse request returning *GetObjectFingerprintMeResponse
func (c *ClientWithResponses) GetObjectFingerprintMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetObjectFingerprintMeResponse, error) {
	rsp, err := c.GetObjectFingerprintMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectFingerprintMeResponse(rsp)
}

// PostObjectFolderWithBodyWithResponse request with arbitrary body returning *PostObjectFolderResponse
func (c *ClientWithResponses) PostObjectFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectFolderResponse, error) {
	rsp, err := c.PostObjectFolderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectFolderResponse(rsp)
}

func (c *ClientWithResponses) PostObjectFolderWithResponse(ctx context.Context, body PostObjectFolderJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectFolderResponse, error) {
	rsp, err := c.PostObjectFolder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectFolderResponse(rsp)
}

// DeleteObjectFolderIdWithResponse request returning *DeleteObjectFolderIdResponse
func (c *ClientWithResponses) DeleteObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectFolderIdResponse, error) {
	rsp, err := c.DeleteObjectFolderId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectFolderIdResponse(rsp)
}

// GetObjectFolderIdWithResponse request returning *GetObjectFolderIdResponse
func (c *ClientWithResponses) GetObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectFolderIdResponse, error) {
	rsp, err := c.GetObjectFolderId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectFolderIdResponse(rsp)
}

// PutObjectFolderIdWithBodyWithResponse request with arbitrary body returning *PutObjectFolderIdResponse
func (c *ClientWithResponses) PutObjectFolderIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectFolderIdResponse, error) {
	rsp, err := c.PutObjectFolderIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectFolderIdResponse(rsp)
}

func (c *ClientWithResponses) PutObjectFolderIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectFolderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectFolderIdResponse, error) {
	rsp, err := c.PutObjectFolderId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectFolderIdResponse(rsp)
}

// PostObjectItemWithBodyWithResponse request with arbitrary body returning *PostObjectItemResponse
func (c *ClientWithResponses) PostObjectItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectItemResponse, error) {
	rsp, err := c.PostObjectItemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectItemResponse(rsp)
}

func (c *ClientWithResponses) PostObjectItemWithResponse(ctx context.Context, body PostObjectItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectItemResponse, error) {
	rsp, err := c.PostObjectItem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectItemResponse(rsp)
}

// DeleteObjectItemIdWithResponse request returning *DeleteObjectItemIdResponse
func (c *ClientWithResponses) DeleteObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectItemIdResponse, error) {
	rsp, err := c.DeleteObjectItemId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectItemIdResponse(rsp)
}

// GetObjectItemIdWithResponse request returning *GetObjectItemIdResponse
func (c *ClientWithResponses) GetObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectItemIdResponse, error) {
	rsp, err := c.GetObjectItemId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectItemIdResponse(rsp)
}

// PutObjectItemIdWithBodyWithResponse request with arbitrary body returning *PutObjectItemIdResponse
func (c *ClientWithResponses) PutObjectItemIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectItemIdResponse, error) {
	rsp, err := c.PutObjectItemIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectItemIdResponse(rsp)
}

func (c *ClientWithResponses) PutObjectItemIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectItemIdResponse, error) {
	rsp, err := c.PutObjectItemId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectItemIdResponse(rsp)
}

// GetObjectNotesIdWithResponse request returning *GetObjectNotesIdResponse
func (c *ClientWithResponses) GetObjectNotesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectNotesIdResponse, error) {
	rsp, err := c.GetObjectNotesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectNotesIdResponse(rsp)
}

// PostObjectOrgCollectionWithBodyWithResponse request with arbitrary body returning *PostObjectOrgCollectionResponse
func (c *ClientWithResponses) PostObjectOrgCollectionWithBodyWithResponse(ctx context.Context, params *PostObjectOrgCollectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectOrgCollectionResponse, error) {
	rsp, err := c.PostObjectOrgCollectionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectOrgCollectionResponse(rsp)
}

func (c *ClientWithResponses) PostObjectOrgCollectionWithResponse(ctx context.Context, params *PostObjectOrgCollectionParams, body PostObjectOrgCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectOrgCollectionResponse, error) {
	rsp, err := c.PostObjectOrgCollection(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectOrgCollectionResponse(rsp)
}

// DeleteObjectOrgCollectionIdWithResponse request returning *DeleteObjectOrgCollectionIdResponse
func (c *ClientWithResponses) DeleteObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *DeleteObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*DeleteObjectOrgCollectionIdResponse, error) {
	rsp, err := c.DeleteObjectOrgCollectionId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectOrgCollectionIdResponse(rsp)
}

// GetObjectOrgCollectionIdWithResponse request returning *GetObjectOrgCollectionIdResponse
func (c *ClientWithResponses) GetObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *GetObjectOrgCollectionIdParams, reqEditors ...RequestEditorFn) (*GetObjectOrgCollectionIdResponse, error) {
	rsp, err := c.GetObjectOrgCollectionId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectOrgCollectionIdResponse(rsp)
}

// PutObjectOrgCollectionIdWithBodyWithResponse request with arbitrary body returning *PutObjectOrgCollectionIdResponse
func (c *ClientWithResponses) PutObjectOrgCollectionIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectOrgCollectionIdResponse, error) {
	rsp, err := c.PutObjectOrgCollectionIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectOrgCollectionIdResponse(rsp)
}

func (c *ClientWithResponses) PutObjectOrgCollectionIdWithResponse(ctx context.Context, id openapi_types.UUID, params *PutObjectOrgCollectionIdParams, body PutObjectOrgCollectionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectOrgCollectionIdResponse, error) {
	rsp, err := c.PutObjectOrgCollectionId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectOrgCollectionIdResponse(rsp)
}

// GetObjectPasswordIdWithResponse request returning *GetObjectPasswordIdResponse
func (c *ClientWithResponses) GetObjectPasswordIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectPasswordIdResponse, error) {
	rsp, err := c.GetObjectPasswordId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectPasswordIdResponse(rsp)
}

// PostObjectSendWithBodyWithResponse request with arbitrary body returning *PostObjectSendResponse
func (c *ClientWithResponses) PostObjectSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectSendResponse, error) {
	rsp, err := c.PostObjectSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectSendResponse(rsp)
}

func (c *ClientWithResponses) PostObjectSendWithResponse(ctx context.Context, body PostObjectSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectSendResponse, error) {
	rsp, err := c.PostObjectSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectSendResponse(rsp)
}

// DeleteObjectSendIdWithResponse request returning *DeleteObjectSendIdResponse
func (c *ClientWithResponses) DeleteObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteObjectSendIdResponse, error) {
	rsp, err := c.DeleteObjectSendId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectSendIdResponse(rsp)
}

// GetObjectSendIdWithResponse request returning *GetObjectSendIdResponse
func (c *ClientWithResponses) GetObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectSendIdResponse, error) {
	rsp, err := c.GetObjectSendId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectSendIdResponse(rsp)
}

// PutObjectSendIdWithBodyWithResponse request with arbitrary body returning *PutObjectSendIdResponse
func (c *ClientWithResponses) PutObjectSendIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutObjectSendIdResponse, error) {
	rsp, err := c.PutObjectSendIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectSendIdResponse(rsp)
}

func (c *ClientWithResponses) PutObjectSendIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutObjectSendIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutObjectSendIdResponse, error) {
	rsp, err := c.PutObjectSendId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutObjectSendIdResponse(rsp)
}

// GetObjectTemplateTypeWithResponse request returning *GetObjectTemplateTypeResponse
func (c *ClientWithResponses) GetObjectTemplateTypeWithResponse(ctx context.Context, pType GetObjectTemplateTypeParamsType, reqEditors ...RequestEditorFn) (*GetObjectTemplateTypeResponse, error) {
	rsp, err := c.GetObjectTemplateType(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectTemplateTypeResponse(rsp)
}

// GetObjectTotpIdWithResponse request returning *GetObjectTotpIdResponse
func (c *ClientWithResponses) GetObjectTotpIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectTotpIdResponse, error) {
	rsp, err := c.GetObjectTotpId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectTotpIdResponse(rsp)
}

// GetObjectUriIdWithResponse request returning *GetObjectUriIdResponse
func (c *ClientWithResponses) GetObjectUriIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectUriIdResponse, error) {
	rsp, err := c.GetObjectUriId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectUriIdResponse(rsp)
}

// GetObjectUsernameIdWithResponse request returning *GetObjectUsernameIdResponse
func (c *ClientWithResponses) GetObjectUsernameIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetObjectUsernameIdResponse, error) {
	rsp, err := c.GetObjectUsernameId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectUsernameIdResponse(rsp)
}

// PostRestoreItemIdWithResponse request returning *PostRestoreItemIdResponse
func (c *ClientWithResponses) PostRestoreItemIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostRestoreItemIdResponse, error) {
	rsp, err := c.PostRestoreItemId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestoreItemIdResponse(rsp)
}

// PostSendIdRemovePasswordWithResponse request returning *PostSendIdRemovePasswordResponse
func (c *ClientWithResponses) PostSendIdRemovePasswordWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostSendIdRemovePasswordResponse, error) {
	rsp, err := c.PostSendIdRemovePassword(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendIdRemovePasswordResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// PostSyncWithResponse request returning *PostSyncResponse
func (c *ClientWithResponses) PostSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSyncResponse, error) {
	rsp, err := c.PostSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSyncResponse(rsp)
}

// PostUnlockWithBodyWithResponse request with arbitrary body returning *PostUnlockResponse
func (c *ClientWithResponses) PostUnlockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnlockResponse, error) {
	rsp, err := c.PostUnlockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnlockResponse(rsp)
}

func (c *ClientWithResponses) PostUnlockWithResponse(ctx context.Context, body PostUnlockJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnlockResponse, error) {
	rsp, err := c.PostUnlock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnlockResponse(rsp)
}

// ParsePostAttachmentResponse parses an HTTP response from a PostAttachmentWithResponse call
func ParsePostAttachmentResponse(rsp *http.Response) (*PostAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostConfirmOrgMemberIdResponse parses an HTTP response from a PostConfirmOrgMemberIdWithResponse call
func ParsePostConfirmOrgMemberIdResponse(rsp *http.Response) (*PostConfirmOrgMemberIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfirmOrgMemberIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDeviceApprovalOrganizationIdResponse parses an HTTP response from a GetDeviceApprovalOrganizationIdWithResponse call
func ParseGetDeviceApprovalOrganizationIdResponse(rsp *http.Response) (*GetDeviceApprovalOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceApprovalOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deviceapprovallist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDeviceApprovalOrganizationIdApproveAllResponse parses an HTTP response from a PostDeviceApprovalOrganizationIdApproveAllWithResponse call
func ParsePostDeviceApprovalOrganizationIdApproveAllResponse(rsp *http.Response) (*PostDeviceApprovalOrganizationIdApproveAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceApprovalOrganizationIdApproveAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDeviceApprovalOrganizationIdApproveRequestIdResponse parses an HTTP response from a PostDeviceApprovalOrganizationIdApproveRequestIdWithResponse call
func ParsePostDeviceApprovalOrganizationIdApproveRequestIdResponse(rsp *http.Response) (*PostDeviceApprovalOrganizationIdApproveRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceApprovalOrganizationIdApproveRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDeviceApprovalOrganizationIdDenyAllResponse parses an HTTP response from a PostDeviceApprovalOrganizationIdDenyAllWithResponse call
func ParsePostDeviceApprovalOrganizationIdDenyAllResponse(rsp *http.Response) (*PostDeviceApprovalOrganizationIdDenyAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceApprovalOrganizationIdDenyAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDeviceApprovalOrganizationIdDenyRequestIdResponse parses an HTTP response from a PostDeviceApprovalOrganizationIdDenyRequestIdWithResponse call
func ParsePostDeviceApprovalOrganizationIdDenyRequestIdResponse(rsp *http.Response) (*PostDeviceApprovalOrganizationIdDenyRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceApprovalOrganizationIdDenyRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGenerateResponse parses an HTTP response from a GetGenerateWithResponse call
func ParseGetGenerateResponse(rsp *http.Response) (*GetGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectCollectionsResponse parses an HTTP response from a GetListObjectCollectionsWithResponse call
func ParseGetListObjectCollectionsResponse(rsp *http.Response) (*GetListObjectCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectFoldersResponse parses an HTTP response from a GetListObjectFoldersWithResponse call
func ParseGetListObjectFoldersResponse(rsp *http.Response) (*GetListObjectFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectItemsResponse parses an HTTP response from a GetListObjectItemsWithResponse call
func ParseGetListObjectItemsResponse(rsp *http.Response) (*GetListObjectItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectOrgCollectionsResponse parses an HTTP response from a GetListObjectOrgCollectionsWithResponse call
func ParseGetListObjectOrgCollectionsResponse(rsp *http.Response) (*GetListObjectOrgCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectOrgCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectOrgMembersResponse parses an HTTP response from a GetListObjectOrgMembersWithResponse call
func ParseGetListObjectOrgMembersResponse(rsp *http.Response) (*GetListObjectOrgMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectOrgMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectOrganizationsResponse parses an HTTP response from a GetListObjectOrganizationsWithResponse call
func ParseGetListObjectOrganizationsResponse(rsp *http.Response) (*GetListObjectOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListObjectSendResponse parses an HTTP response from a GetListObjectSendWithResponse call
func ParseGetListObjectSendResponse(rsp *http.Response) (*GetListObjectSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListObjectSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLockResponse parses an HTTP response from a PostLockWithResponse call
func ParsePostLockResponse(rsp *http.Response) (*PostLockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LockunlockSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMoveItemidOrganizationIdResponse parses an HTTP response from a PostMoveItemidOrganizationIdWithResponse call
func ParsePostMoveItemidOrganizationIdResponse(rsp *http.Response) (*PostMoveItemidOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMoveItemidOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectAttachmentIdResponse parses an HTTP response from a DeleteObjectAttachmentIdWithResponse call
func ParseDeleteObjectAttachmentIdResponse(rsp *http.Response) (*DeleteObjectAttachmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectAttachmentIdResponse parses an HTTP response from a GetObjectAttachmentIdWithResponse call
func ParseGetObjectAttachmentIdResponse(rsp *http.Response) (*GetObjectAttachmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectExposedIdResponse parses an HTTP response from a GetObjectExposedIdWithResponse call
func ParseGetObjectExposedIdResponse(rsp *http.Response) (*GetObjectExposedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectExposedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectFingerprintMeResponse parses an HTTP response from a GetObjectFingerprintMeWithResponse call
func ParseGetObjectFingerprintMeResponse(rsp *http.Response) (*GetObjectFingerprintMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectFingerprintMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectFolderResponse parses an HTTP response from a PostObjectFolderWithResponse call
func ParsePostObjectFolderResponse(rsp *http.Response) (*PostObjectFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectFolderIdResponse parses an HTTP response from a DeleteObjectFolderIdWithResponse call
func ParseDeleteObjectFolderIdResponse(rsp *http.Response) (*DeleteObjectFolderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectFolderIdResponse parses an HTTP response from a GetObjectFolderIdWithResponse call
func ParseGetObjectFolderIdResponse(rsp *http.Response) (*GetObjectFolderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObjectFolderIdResponse parses an HTTP response from a PutObjectFolderIdWithResponse call
func ParsePutObjectFolderIdResponse(rsp *http.Response) (*PutObjectFolderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectFolderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectItemResponse parses an HTTP response from a PostObjectItemWithResponse call
func ParsePostObjectItemResponse(rsp *http.Response) (*PostObjectItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectItemIdResponse parses an HTTP response from a DeleteObjectItemIdWithResponse call
func ParseDeleteObjectItemIdResponse(rsp *http.Response) (*DeleteObjectItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectItemIdResponse parses an HTTP response from a GetObjectItemIdWithResponse call
func ParseGetObjectItemIdResponse(rsp *http.Response) (*GetObjectItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObjectItemIdResponse parses an HTTP response from a PutObjectItemIdWithResponse call
func ParsePutObjectItemIdResponse(rsp *http.Response) (*PutObjectItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectNotesIdResponse parses an HTTP response from a GetObjectNotesIdWithResponse call
func ParseGetObjectNotesIdResponse(rsp *http.Response) (*GetObjectNotesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectNotesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectOrgCollectionResponse parses an HTTP response from a PostObjectOrgCollectionWithResponse call
func ParsePostObjectOrgCollectionResponse(rsp *http.Response) (*PostObjectOrgCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectOrgCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectOrgCollectionIdResponse parses an HTTP response from a DeleteObjectOrgCollectionIdWithResponse call
func ParseDeleteObjectOrgCollectionIdResponse(rsp *http.Response) (*DeleteObjectOrgCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectOrgCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectOrgCollectionIdResponse parses an HTTP response from a GetObjectOrgCollectionIdWithResponse call
func ParseGetObjectOrgCollectionIdResponse(rsp *http.Response) (*GetObjectOrgCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectOrgCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObjectOrgCollectionIdResponse parses an HTTP response from a PutObjectOrgCollectionIdWithResponse call
func ParsePutObjectOrgCollectionIdResponse(rsp *http.Response) (*PutObjectOrgCollectionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectOrgCollectionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectPasswordIdResponse parses an HTTP response from a GetObjectPasswordIdWithResponse call
func ParseGetObjectPasswordIdResponse(rsp *http.Response) (*GetObjectPasswordIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectPasswordIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectSendResponse parses an HTTP response from a PostObjectSendWithResponse call
func ParsePostObjectSendResponse(rsp *http.Response) (*PostObjectSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectSendIdResponse parses an HTTP response from a DeleteObjectSendIdWithResponse call
func ParseDeleteObjectSendIdResponse(rsp *http.Response) (*DeleteObjectSendIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectSendIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectSendIdResponse parses an HTTP response from a GetObjectSendIdWithResponse call
func ParseGetObjectSendIdResponse(rsp *http.Response) (*GetObjectSendIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectSendIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutObjectSendIdResponse parses an HTTP response from a PutObjectSendIdWithResponse call
func ParsePutObjectSendIdResponse(rsp *http.Response) (*PutObjectSendIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutObjectSendIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectTemplateTypeResponse parses an HTTP response from a GetObjectTemplateTypeWithResponse call
func ParseGetObjectTemplateTypeResponse(rsp *http.Response) (*GetObjectTemplateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectTemplateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectTotpIdResponse parses an HTTP response from a GetObjectTotpIdWithResponse call
func ParseGetObjectTotpIdResponse(rsp *http.Response) (*GetObjectTotpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectTotpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectUriIdResponse parses an HTTP response from a GetObjectUriIdWithResponse call
func ParseGetObjectUriIdResponse(rsp *http.Response) (*GetObjectUriIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectUriIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectUsernameIdResponse parses an HTTP response from a GetObjectUsernameIdWithResponse call
func ParseGetObjectUsernameIdResponse(rsp *http.Response) (*GetObjectUsernameIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectUsernameIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRestoreItemIdResponse parses an HTTP response from a PostRestoreItemIdWithResponse call
func ParsePostRestoreItemIdResponse(rsp *http.Response) (*PostRestoreItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRestoreItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSendIdRemovePasswordResponse parses an HTTP response from a PostSendIdRemovePasswordWithResponse call
func ParsePostSendIdRemovePasswordResponse(rsp *http.Response) (*PostSendIdRemovePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendIdRemovePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSyncResponse parses an HTTP response from a PostSyncWithResponse call
func ParsePostSyncResponse(rsp *http.Response) (*PostSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUnlockResponse parses an HTTP response from a PostUnlockWithResponse call
func ParsePostUnlockResponse(rsp *http.Response) (*PostUnlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LockunlockSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
